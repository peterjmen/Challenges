// inputlongnumber.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <string>
#include <vector>
using namespace std;

int main()
{

    string topLineOfLongNumber = "7654345689435693459878789998765434578897598965987654567987654532367891034984323456898764323467899987";


    cout << "top line/first row of the long number is : \n";

    cout << topLineOfLongNumber << "\n\n";
    cout << topLineOfLongNumber.length() << " is the length of the top line, meaning it is a column of this size \n\n";

    vector<long long int>VectorTopLineLength;

    for (int i = 0; i < topLineOfLongNumber.length(); i++) {
        VectorTopLineLength.push_back(topLineOfLongNumber[i]);
    };

    //failed attempt to convert char to int
    //for (int i = 0; i < topLineOfLongNumber.length(); i++) {
    //    //if char to int coverter not used, prints out values with a 5 infront of them -- ascii
    //    int charToIntConverter = topLineOfLongNumber[i];
    //    VectorTopLineLength.push_back(charToIntConverter);
    //};

    cout << "size of vector is the same as column size " << VectorTopLineLength.size() << "\n\n";


    cout << "Values contained in the top line vector are : \n";

    for (int i = 0; i < VectorTopLineLength.size(); i++) {
        cout << VectorTopLineLength[i] - 48;; //-48 is the modifier to change a single char to int from ascii
    };

    cout << "\n\n";

    //input for long number
    string longNumber

    cout << "The longer number string is: \n" << longNumber << "\n\n";

    int rows = longNumber.length()/topLineOfLongNumber.length();
    cout << "\nrows is : " << rows << "\n\n";
    int cols = topLineOfLongNumber.length();
    cout << "\ncols is : " << cols << "\n\n";

    vector<vector<long long int> > longNumberArray(rows+2, vector<long long int>(cols+2, 9));

    //+1's to make 1 index'd inside slightly larger 2d vector to pad with 9's
    cout << "Data put into 100/100 2d vector:\n";
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++) {
            longNumberArray[i+1][j+1] = longNumber[j+i* topLineOfLongNumber.length()]-48;
            cout << longNumberArray[i+1][j+1];
        }
        cout << endl;
    }





    cout << "\n\n"; cout << "\n\n";

    cout << "vector expressed padded with 9's L \n";

    for (int i = 0; i < longNumberArray.size(); i++)
    {
        for (int j = 0; j < longNumberArray[i].size(); j++)
        {
            cout << longNumberArray[i][j];
        }
        cout << endl;
    }



    //cout << "\n\n";
    //cout << "2d vector expressed is :";
    //for (int i = 0; i < m; i++) {
    //    for (int j = 0; j < n; j++) {
    //        longNumberArray[i][j] = longNumber[j + i * 100] - 48;
    //        cout << longNumberArray[i][j];
    //    }
    //    cout << endl;
    //};



//#include <bits/stdc++.h>
//    using namespace std;
//    int main()
//    {
//        int rows = 2;
//        int cols = 2;
//        int val = 1;
//        vector< vector<int> > v(rows, vector<int>(cols, val));  /*creates 2d vector “v[rows][cols]” and initializes all elements to “val == 1” (default value is 0)*/
//        v[0][0] = 5;
//        v[1][1] = 4;
//        cout << v[0][0] << endl; //Output: 5cout << v[1][0] << endl; //Output: 1return 0;}



   
}
